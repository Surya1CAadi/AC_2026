int findpivot(vector<int>ar){
     int n=ar.size();
    int s=0,e=n-1,mid;
    while(s<=e){
        mid=(e+s)/2;
        if(s==e)
        return s;
        if(mid<e&&ar[mid]>ar[mid+1]){
        return mid;
        }
        if(mid-1>s&&ar[mid-1]>ar[mid]){
        return mid-1;}
        if(ar[mid]>=ar[s])
        s=mid+1;
        else 
        e=mid-1;
    }
    return -1;
}
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int s,e,mid,n=nums.size();
       int p=findpivot(nums);
       target>=nums[0]?(s=0,e=p):(s=p+1,e=n-1);
       while(s<=e){
           mid=s+(e-s)/2;
           if(nums[mid]==target)
          return mid;
           if(nums[mid]>target)
           e=mid-1;
           else
           s=mid+1;
       }
       return -1;
    }
};