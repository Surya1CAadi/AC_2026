/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if (head == NULL || head->next == NULL)
            return head;
        ListNode *curr = head->next, *pre = head;
        head = curr;
        while (pre != NULL && curr != NULL) {
           pre->next = curr->next;
            curr->next = pre;
            curr = curr->next;
            cout<<curr->val;
            cout<<pre->val;
           if (pre != NULL) {
                pre = pre->next;
            }
            if (pre!=NULL&&pre->next != NULL) {
                curr->next = pre->next;
                curr = pre;
            }
            else
            curr = pre;
            if (curr != NULL)
                curr = curr->next;
        }
       
        return head;
    }
};