class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int s = 0;
        int e = nums.size() - 1;

        while (s < e) {
             int m = (s + e) / 2;
            if (nums[m] >= nums[m + 1])
                e = m;
            else
                s = m + 1;
        }
        return s;
    }
};








/// second approach
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int n=nums.size();
        int s=0,e=n-1,m=(s+e)/2;
        while(s<=e){
            if(n==2||m==0&&n!=1)
            return nums[0]>nums[1]?0:1;
            if(m==n-1) return m;
            if(nums[m]>nums[m-1]&&nums[m]>nums[m+1])
            return m;
            else if(nums[m]<nums[m-1]&&nums[m]>nums[m+1])
            e=m-1;
            else if(nums[m]>nums[m-1]&&nums[m]<nums[m+1])
            s=m+1;
            else if(nums[m]<nums[m-1]&&nums[m]<nums[m+1])
            nums[m-1]>nums[m+1]?e=m-1:s=m+1;
            m=(s+e)/2;
        }
        return m;
    }
};