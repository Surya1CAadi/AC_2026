/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
//  ListNode*
 void reverseList(ListNode* &head) {
        ListNode* pre=NULL;
        ListNode* curr=head;
        ListNode* pri;
        while (curr!= NULL) {
            pri = curr->next;
            curr->next = pre;
           pre = curr;
           curr = pri;
        }
        head=pre;
    }
    ListNode* doubleIt(ListNode* head) {
        reverseList(head);
        ListNode*temp=head;
        int carry=0;
        while(temp!=NULL){
            int a=2*temp->val+carry;
            carry=a/10;
            temp->val=a%10;
            temp=temp->next;
        }
        reverseList(head);
        while(carry){
            ListNode*newnode=new  ListNode(carry%10) ;
            carry=carry/10;
            newnode->next=head;
            head=newnode;
        }
        return head;
    }
};