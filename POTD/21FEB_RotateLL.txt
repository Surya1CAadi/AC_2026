/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if (head == NULL || head->next == NULL)
            return head;
        ListNode *temp = head, *pre = head;
        int i = 0;
        while (temp != NULL) {
            i++;
            temp = temp->next;
        }
        k = k % i;
        if (k == 0)
            return head;
        // for(int i=0;i<k;i++){
        //     while(temp->next!=NULL){
        //         pre=temp;
        //         temp=temp->next;
        //     }
        //     temp->next=head;
        //     head=temp;
        //     pre->next=NULL;
        // }
        /// thoda optimal krte hai
        int c = 0;
        temp = head;
        while (c < i - k - 1) {
            temp = temp->next;
            c++;
        }
        pre = temp;
        temp = temp->next;
        pre->next = NULL;
        pre = head;
        head = temp;
        while (temp->next != NULL) {
            temp = temp->next;
            cout << temp->val << endl;
        }
        temp->next = pre;
        return head;
    }
};
