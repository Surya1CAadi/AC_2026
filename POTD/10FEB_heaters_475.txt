class Solution {
public:
   bool possible(vector<int>& houses, vector<int>& heaters,int& l1,int& l2,int& mid){
       int i=0,j=0;
       while(i<l1&&j<l2){
           if(abs(houses[i]-heaters[j])<=mid){
               i++;
           }
           else{
               if(houses[i]>heaters[j]&&j!=l2-1){
                   j++;
               }
               else 
               return 0;
           }
       }
           return 1;
   }   
    int findRadius(vector<int>& houses, vector<int>& heaters) {
        sort(houses.begin(),houses.end());
        sort(heaters.begin(),heaters.end());
        int l1=houses.size();
        int l2=heaters.size();
        int ans=0,s=0,e=max(houses[l1-1],heaters[l2-1]);
        while(s<=e){
            int mid=s+(e-s)/2;
            if(possible(houses,heaters,l1,l2,mid)){
                ans=mid;
                e=mid-1;
            }
            else s=mid+1;
        }
        return ans;
    }
};   