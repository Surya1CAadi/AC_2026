 vector<int> answerQueries(vector<int>& nums, vector<int>& queries) {
        sort(nums.begin(), nums.end());
        for (int i = 1; i < nums.size(); i++) {
            nums[i] += nums[i - 1];
        }
        vector<int> ans;
        int i = 0, j = 0;
        for (i = 0; i < queries.size(); i++) { 
            int s=0,e=nums.size()-1,a=-1;
            // solution using binary search   |||||///     TC. MlogN
            
            while(s<=e){
                int mid=s+(e-s)/2;
                if(queries[i] >= nums[mid])
                {
                    a=mid;
                    s=mid+1;
                }
                else e=mid-1;
            }
            ans.push_back(a+1);
        //second solution
            //int a=-1;
            // for (j = 0; j < nums.size(); j++) {
            //     if (queries[i] < nums[j]) {
            //         break;
            //     }
            //     else a=j;
            // }
            // ans.push_back(a+1);

            //first solution
            // for (j = 0; j < nums.size(); j++) {
            //     if (queries[i] < nums[j]) {
            //         ans.push_back(j);
            //         break;
            //     }
            //     else if(j==nums.size()-1&&queries[i] >= nums[j]){
            //     ans.push_back(j+1);
            //     break;
            //     }
            // }
        }
        return ans;
    }