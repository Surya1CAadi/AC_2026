/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
 void insert(ListNode* &tail,ListNode* &head,int data){
        ListNode* newnode=new ListNode(data);
        if(head==NULL){
            head=newnode;
            tail=newnode;
            return;
        }
        tail->next=newnode;
        tail=newnode;
    }
 ListNode* add(ListNode* l1, ListNode* l2) {
        int carry=0,sum=0;
        ListNode* head=NULL;
        ListNode* tail=NULL;
        while(l1!=NULL&&l2!=NULL){
         sum=l1->val+l2->val+carry;
         carry=sum/10;
         insert(tail,head,sum%10);
         l1=l1->next;
         l2=l2->next;
        }
        while(l1!=NULL){
         sum=l1->val+carry;
         carry=sum/10;
        insert(tail,head,sum%10);
         l1=l1->next;
        }
        while(l2!=NULL){
        sum=l2->val+carry;
         carry=sum/10;
        insert(tail,head,sum%10);
         l2=l2->next;
        }
        if(carry)
         insert(tail,head,carry);
        return head;
    }
 ListNode* reverseList(ListNode* head) {
        ListNode* pre=NULL;
        ListNode* curr=head;
        ListNode* pri;
        while (curr!= NULL) {
            pri = curr->next;
            curr->next = pre;
           pre = curr;
           curr = pri;
        }
        return pre;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        l1=reverseList(l1);
        l2=reverseList(l2);
       l1= add(l1,l2);
       l1=reverseList(l1);
       return l1;
    }
};