class Solution {
public:
Node* reverseList(Node* head) {
        Node* pre=NULL;
        Node* curr=head;
        Node* pri;
        while (curr!= NULL) {
            pri = curr->next;
            curr->next = pre;
           pre = curr;
           curr = pri;
        }
        return pre;
    }
    Node* subLinkedList(Node* head1, Node* head2) {
        // Your implementation of subLinkedList goes here
        // Make sure to return the head of the resulting linked list
        int n=0,m=0;
        Node *temp1=head1,*temp2=head2,*pre=NULL,*ans1=new Node(0);
        
        while(temp1!=NULL){
            if(temp1->data!=0){
                head1=temp1;
                break;
            }
            pre=temp1;
             temp1=temp1->next;
        }
        if(pre)
        pre->next=NULL;
        
        while(temp2!=NULL){
            if(temp2->data!=0){
                head2=temp2;
                break;
            }
            pre=temp2;
            temp2=temp2->next;
        }
        if(pre)
        pre->next=NULL;
        
        // cout<<head2->data;
        // cout<<temp2->data;
        int a=0;
         while(temp1!=NULL&&temp2!=NULL){
            if(temp1->data>temp2->data&&!a)
            a=1;
            if(temp1->data<temp2->data&&!a)
            a=2;
            n++;
            temp1=temp1->next;
            m++;
            temp2=temp2->next;
        }
        while(temp1!=NULL){
            n++;
            temp1=temp1->next;
        }
        while(temp2!=NULL){
            m++;
            temp2=temp2->next;
        }
      head1= reverseList(head1);
      head2= reverseList(head2);
        if(n>m||m==n&&a==1){
            temp1=head1;
            temp2=head2;
        }
        else if(n<m||m==n&&a==2){
            temp1=head2;
            temp2=head1;
        }
        else if(a==0&&n==m)
        return ans1;
        int carry=0;
        Node*ans=temp1;
         while(temp1!=NULL&&temp2!=NULL){
            if(temp1->data-carry>=temp2->data){
                temp1->data=temp1->data-carry-temp2->data;
                carry=0;
            }
            else{
                temp1->data=temp1->data-carry+10-temp2->data;
                carry=1;
            }
           
            temp1=temp1->next;
            temp2=temp2->next;
        }
         while(temp1!=NULL){
              if(temp1->data-carry>=0){
                temp1->data=temp1->data-carry;
                carry=0;
            }
            else{
                temp1->data=temp1->data-carry+10;
                carry=1;
            }
            temp1=temp1->next;
        }
      temp1= reverseList(ans);
      pre=NULL;
         while(temp1!=NULL){
            if(temp1->data!=0){
                head1=temp1;
                break;
            }
            pre=temp1;
             temp1=temp1->next;
        }
        if(pre)
        pre->next=NULL;
        
        return temp1;
    }
};